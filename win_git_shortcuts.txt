https://githowto.com/aliases
Https://git-scm.com/docs



Windows bash
============
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
git config --global alias.com commit
git config --global alias.a add -A


MacOS
=====
.git/config

[alias]
  co = checkout
  com = commit
  st = status
  br = branch
  a = add


Checkout a local branch
=======================
git checkout -b <new-branchname>


Checkout remote branch
======================

git checkout --track origin/<branchname>

git checkout <remote-branch-name>


Revert all changes
==================
git reset --hard HEAD (you're back to the last commit for all files)

git merge -abort


Un-modifying a file
===================
git checkout -- <file>


Un-stage a file
===============
git reset <file>		(move file out of staging area)

or 

git reset HEAD <file>

<<<<<<< HEAD
git resert  			(to remove all files from staging)

=======
git reset  			(to remove all files from staging)
>>>>>>> 41c53bd6a721766eb8bae90be3372090d1fed78f



How can I delete a git alias
============================
http://stackoverflow.com/questions/23512402/ddg#23512420

git config --global --unset alias.trololo


List aliases (Windows)
======================
git config --get-regexp alias


White space check, before commit 
================================
git diff --check

git diff

git diff --staged


Rename a local branch
=====================
If you want to rename a branch while pointed to any branch, do:

git branch -m <oldname> <newname>

To rename current branch:
git branch -m <newname>

List branches
=============
git branch          (local)

git branch -a       (remote)


Delete a remote branch
======================
git push origin --delete <branch-name>


Delete a local branch
=====================
git branch -d <branch-name>. (Or -D, to force)



Removing an unstaged file
=========================
git clean -n 	to only list

git clean -f 	to really delete


Remove a file
=============
remove from OS. $rm myfile
remove from git $git rm myfile
git commit 


Moving(rename) a file
=====================
$ git mv file_from file_to

-or-

$ mv README.md README 
$ git rm README.md
$ git add README


View commit history
===================
git log

git log -p -2 					(see last 2 commits and deltas)

git log stat  					(shows files changed)

git log --pretty=format:"%h %s" --graph. 	(graphical view)


Pushing
=======

git push -u origin <branch>  (-u links local and remote branches)

git push origin <branch>


Stashing By default, git stash will stash only modified and staged tracked files.
========

git stash

git stash -u 			        (include untracked files in the stash, minus ignored files)

git stash -a 			        (include untrack and ignored files)

git stash list 			        (show stash list)

git stash apply 		        (Keeps the stash but doesn't restage)

git stash apply --index 		(applies stash and also attempts to restage)

git stash pop --index 			(applies stash and also attempts to restage)

git stash pop.  		        (Apply stash and remove it)

git stash clear 		        (removes all stashes)

git stash drop stash@{0} 		(remove specific stash)

git stash show				view stash changes

git stash show stash@{2}		see diff changes of a particular stash

git stash show -p			see diff changes

git stash branch <branch_name> stash@{5} create a branch fron a stash


===================================================================================
Corey Shafer
https://www.youtube.com/watch?v=HVsySz-h9r4&list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx

Basic Git Commands

git command progression
=======================


git --version

git config --global user.name "some name"
git config --global user.email "someone@something.com"
git config --list

git help verb
git verb --help

git init  (from inside your directory, this creates the .git folder)

touch .gitignore (add files, wildcards)

git add -A (adds untracked and edited files to staging)

git reset <file> (to remove from staging)

git reset (removes all files from staging)

git commit -m "commit message"

git log (shows last commit msg, author, date)

remote repos
============

git clone <url> .  (dot for current directory)

git clone ../remote_repo.git .

git remote -v   (lists repo info)

git branch -a  ('all' list all local and remote branches)

--after file edits:

git diff   (shows changes)

git status

git add -A

git commit -m "message"

--push to remote

git pull origin development  (reconcile with other devs' code)

git push origin development

--common workflow-------------------

git checkout -b <feature-branch>

edit your files, hack hack hack

git status

git add -A

git commit -m "message"

git push origin <feature-branch>    -u links local to remote for tracking

-- goto AzureDevOps create a Pull request, auto merges

or (for a local merge and push)

git checkout master

git pull origin master

git merge <feature-branch>

git push origin master

-- remove local branch

git branch -d <feature-branch>

git push origin --delete <feature-branch>


===================================================================================
Corey Shafer
https://www.youtube.com/watch?v=FdZecVxzJbk&list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx&index=2

Fixing common mistakes

-- Backout all changes from a file (before staging and committing)

git checkout <file>


-- do a commit with wrong message

git commit --amend -m "new message"

-- after commit, you find that you left out a file

create/edit the file

git add -A <missing-file>

git commit --amend (brings up editor, just save and close it out)

git log --stat (show leftout file)

-- commiting to the wrong branch

git log (to get hash, abcdef to move)

git checkout <feature-branch>

git cherry-pick abcdef   (commit added)

git checkout master

git log (get the hash,'1234' of the previous commit)

git reset --soft 1234  (keeps changes)

git reset 1234  (keeps changes, nothing staged)

git reset --hard 1234  (removes changes, back to 1234 commit)

git clean -df  (untracked dirs, untracked files)

-- recover from a git reset --hard

(must be done before git GC)

git reflog (shows all commits)

-copy the hash that is before the reset,'hash123' and do:

git checkout hash123

-create a branch <backuo>

git branch backup

git checkout backout

-- revert earlier commits that other devs' have checked out

git log (copy the hash val)

git revert hashval

git log (show revert message)



===================================================================================
Corey Shafer
https://www.youtube.com/watch?v=KLEDKgMmbBI&list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx&index=3

Using the Stash command 

- good if your editing on the wrong branch :)

Just stash, checkout correct branch and stash apply

edit your file(s), hack, hack, hack

..
can't switch branches because of changes

git stash save "this is a change for xyz"

git diff (shows no changes)

git stash list (shows stashes)

do other work on other branches, ...

come back to original branch

git stash apply (stasjh is still there)

-or-

git stash pop (applies and removes stash)

git stash drop 

git stash clear (removes all)


===================================================================================
Corey Shafer
https://www.youtube.com/watch?v=iCGrKFH2oeo&list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx&index=4

Diff and Merge tools

DiffMerge for MacOs

Try Visual Studio Code, Code Lens

===================================================================================
Corey Shafer
https://www.youtube.com/watch?v=tcd4txbTtAY&list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx&index=6

Git Tutorial: Difference between "add -A", "add -u", "add .", and "add *"

(git reset  will reset an Add)


git add -A	stage all modified, deleted, and new (unstaged) files. Default behavior

git add -u	stage all modified and deleted, no new files

git add .	same as -A if you're in the top level dir 

git add *	'*' is a shell command/wild card, do not use 


===================================================================================


gets branches that have been pushed to remote repo and does not change local repo


pull = fetch + merge





